<div id="top">
	<div id="user">
		<%= current_user.email %> | <%= link_to("Logout", :destroy_user_session) %>
	</div>
	<div id="tools">
		<button id="bold" style="font-weight: bold">B</button>
		<button id="italic" style="font-style: italic">I</button>
		<button id="code" data-arg="Droid Sans Mono, Courier, monospace" style="font-family: Droid Sans Mono, Courier, monospace;">Code</button>
		<button id="highlight" data-arg="#ffff00" style="background: #990">Highlight</button>
		<button id="removeformat">Clear formatting</button>
	</div>
</div>
<div id="sidebar">
	<div id="standard-pane">
		<div id="datepicker">
		</div>

		<div id="search-box">
			<%= form_tag(:search, :id => 'search',
						 :update => 'search-results', :remote => true) do %>
			<input id="q" name="q" placeholder="Search..." type="search">
			<% end %>
		</div>
		<div id="search-results">
		</div>
	</div>
</div>
<div id="journal-pane-container">
	<div id="today">
	<%= render :partial => 'entry', :locals => { :entry => @today, :today => true } %>
	</div>
<div id="journal-pane">
	<div id="journal-data">
		<% for entry in @entries %>
			<%= render :partial => 'entry', :locals => { :entry => entry, :today => false } %>
		<% end %>
	</div>
</div>
</div>
<script>


var globalSaveData = {}
function saveDataFor(date) {
	if (!globalSaveData[date]) {
		globalSaveData[date] = {
			active : false,
			every : 5,
			timeout : null,
			pending : false,
			lastSave : (new Date()).getTime() // don't fire off save at first modification
		};
	}
	return globalSaveData[date];
}
function save(saveData, entry, why) {
	saveData.pending = false;
	saveData.lastSave = (new Date().getTime());
	saveData.active = true;
	entry.find('div:empty, meta').remove();
	console.log("Saving: " + entry.data('date') + " - " + why);
	$.ajax(<%=raw url_for(:update).to_json %>, {
		'type' : 'POST',
		'data' : { 'date' : entry.data('date'), 'entry' : entry.html(), 'revision' : entry.data('revision') },
		'context' : entry,
	}).
	success(function (data) {
		if (typeof(data) == 'string') {
			data = JSON.parse(data);
		}
		if (data.result == 'save') {
			$(this).data('revision', data.revision);
		} else if (data.result == 'fail') {
			$(this).removeAttr('contenteditable').addClass('error');
		}
		console.log(data);
	}).
	complete(function () {
		saveData.active = false;
		if (saveData.pending)
			triggerSave(entry);
	});
}
function triggerSave(entry) {
	var saveData = saveDataFor(entry.data('date'));

	if (saveData.active) {
		// queue save
		saveData.pending = true;
	} else {
		if ((saveData.lastSave + (saveData.every*1000)) < ((new Date()).getTime()) && (!saveData.active) && (saveData.timeout)) {
			// save now
			window.clearTimeout(saveData.timeout)
			saveData.timeout = null;
			save(saveData, entry, "Waited too long");
		} else {
			// trigger save shortly
			if (saveData.timeout) {
				window.clearTimeout(saveData.timeout)
				saveData.timeout = null;
			}
			saveData.timeout = window.setTimeout(function () {
				if (saveData.active) {
					saveData.pending = true
				} else {
					save(saveData, entry, "Timeout");
				}
				saveData.timeout = null;
			}, 1000);
		}
	}
}

	var LoadData = <%=raw url_for(:load).to_json %>;
	var SaveActive = false;
jQuery(function ($) {
	$(".journal-entry").live('change', function () {
	$(this).find('div:empty, meta').remove();
		triggerSave($(this));
	});

	$("#search-results li[data-date]").live('click', function () {
		var date = $(this).data('date');
		iWantDate(date);
	});

	$(function() {
		$( "#datepicker" ).datepicker({
			dateFormat : "yy-mm-dd",
			beforeShowDay : function (date) {
				var day = date.getDate();
				var month = date.getMonth() + 1;
				var year = date.getFullYear();
				//console.log("beforeShowDay %s", date);
				return [true, '', "Go to "+year+"-"+month+"-"+day];
			},
			onSelect : function (dateText, inst) {
				iWantDate(dateText);
				console.log("select %s", dateText);
			}
		});
	});

	$("#q").keydown(function () {
		if ($(this).val().size > 2) {
			$('#search').submit();
		}
	});

	var focusedElement = null;
	$(".journal-pane .journal-entry").live('focus', function () {
		focusedElement = $(this);
	});
	$(".journal-pane .journal-entry").live("blur", function () {
		if ($(".journal-entry:focus").size() == 0) {
			focusedElement = null;
		}
	});
});
</script>
